[tox]
envlist = python
minversion = 4

[python-cli-options]
byte-warnings = -b
byte-errors = -bb
max-isolation = -E -s -I
# some-isolation = -I
# FIXME: Python 2 shim. Is this equivalent to the above?
some-isolation = -E -s
warnings-to-errors = -Werror


[testenv]
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m pytest \
      {tty:--color=yes} \
      {posargs:}
commands_post =
  -{envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import atexit, os, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      import coverage; \
      gh_summary_fd = open(\
        os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a",\
      ); \
      atexit.register(gh_summary_fd.close); \
      cov = coverage.Coverage(); \
      cov.load(); \
      cov.report(file=gh_summary_fd, output_format="markdown")'
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      cov_report_arg_prefix = "--cov-report=xml:"; \
      test_report_arg_prefix = "--junitxml="; \
      cov_reports = [\
        arg[len(cov_report_arg_prefix):] for arg in sys.argv \
        if arg.startswith(cov_report_arg_prefix)\
      ]; \
      test_reports = [\
        arg[len(test_report_arg_prefix):] for arg in sys.argv \
        if arg.startswith(test_report_arg_prefix)\
      ]; \
      cov_report_file = cov_reports[-1] if cov_reports else None; \
      test_report_file = test_reports[-1] if test_reports else None; \
      gh_output_fd = open(\
        os.environ["GITHUB_OUTPUT"], encoding="utf-8", mode="a",\
      ); \
      cov_report_file and \
        print(f"cov-report-files={cov_report_file !s}", file=gh_output_fd); \
      test_report_file and \
        print(f"test-result-files={test_report_file !s}", file=gh_output_fd); \
      print("codecov-flags=pytest", file=gh_output_fd); \
      gh_output_fd.close()' \
    {posargs}
  # Print out the output coverage dir and a way to serve html:
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c\
      'import pathlib, shlex, sys; \
      cov_html_report_arg_prefix = "--cov-report=html:"; \
      cov_html_reports = [\
        arg[len(cov_html_report_arg_prefix):] for arg in sys.argv \
        if arg.startswith(cov_html_report_arg_prefix)\
      ]; \
      cov_html_reports or sys.exit(); \
      cov_html_report_dir = pathlib.Path(cov_html_reports[-1]); \
      index_file = cov_html_report_dir / "index.html";\
      index_file.exists() or sys.exit(); \
      html_url = f"file://\{index_file\}";\
      browse_cmd = shlex.join(("python3", "-Im", "webbrowser", html_url)); \
      serve_cmd = shlex.join((\
        "python3", "-Im", "http.server", \
        "--directory", str(cov_html_report_dir), "0", \
      )); \
      print(f"\nTo open the HTML coverage report, run\n\n\
      \t\{browse_cmd !s\}\n");\
      print(f"To serve \
      the HTML coverage report with a local web server, use\n\n\
      \t\{serve_cmd !s\}\n")' \
    {posargs:--cov-report=html:{envtmpdir}{/}htmlcov{/}}
usedevelop = True
extras = testing
passenv =
  WEBTEST_INTERACTIVE
  CI
  GITHUB_WORKFLOW
  PYTEST_*


[dists]
setenv =
  PEP517_OUT_DIR = {env:PEP517_OUT_DIR:{toxinidir}{/}dist}


[testenv:build-docs]
allowlist_externals =
  git
description = Build The Docs
changedir = docs
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags
commands =
  # Build docs site:
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m sphinx \
      -j auto \
      -b html \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      -d "{temp_dir}{/}.doctrees" \
      . \
      "{envdir}{/}docs_out"

  # Print out the output docs dir and a way to serve html:
  -{envpython} \
  {[python-cli-options]byte-errors} \
  {[python-cli-options]some-isolation} \
  -c\
  'import pathlib;\
  docs_dir = pathlib.Path(r"{envdir}") / "docs_out";\
  index_file = docs_dir / "index.html";\
  print(f"\nDocumentation available under \
  `file://\{index_file\}`\n\nTo serve docs, use \
  `python3 -m http.server --directory \
  \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0`\n")'
commands_post =
depends =
  make-changelog
envdir = {toxworkdir}/build-docs
extras =
  docs
  testing

[testenv:pre-commit]
deps = pre-commit
commands_pre =
commands = pre-commit run --all-files --show-diff-on-failure {posargs}
commands_post =

[testenv:pre-commit-pep257]
deps = pre-commit
commands_pre =
commands =
  sed -i.bak 's/^\s\+exclude: magicbus\/test$//g' .pre-commit-config.yaml
  pre-commit run --all-files --show-diff-on-failure pep257 {posargs}
commands_post =


[testenv:cleanup-dists]
description =
  Wipe the the dist{/} folder
usedevelop = false
skip_install = true
deps =
setenv =
  {[dists]setenv}
commands_pre =
commands =
  {envpython} \
  {[python-cli-options]byte-errors} \
  {[python-cli-options]some-isolation} \
  -c \
    'import os, shutil, sys; dists_dir = os.getenv("PEP517_OUT_DIR"); shutil.rmtree(dists_dir, ignore_errors=True); sys.exit(os.path.exists(dists_dir))'
commands_post =


[testenv:build-dists]
description =
  Build dists and put them into
  the `{env:PEP517_OUT_DIR}{/}` folder
depends =
  cleanup-dists
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
  build ~= 1.2.1
passenv =
  PEP517_BUILD_ARGS
setenv =
  {[dists]setenv}
commands_pre =
commands =
  # Starting with build v0.5.0, it builds wheel from sdist
  # if no format arguments are passed. This makes sure that
  # wheels are not dependent on the Git repo or anything
  # external what may be missing from sdist.
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m build \
      --outdir '{env:PEP517_OUT_DIR}{/}' \
      {posargs:{env:PEP517_BUILD_ARGS:}} \
      '{toxinidir}'
commands_post =


[testenv:metadata-validation]
description =
  Verify that dists under the `{env:PEP517_OUT_DIR}{/}` dir
  have valid metadata
depends =
  build-dists
deps =
  setuptools-scm
  twine
usedevelop = false
skip_install = true
commands_pre =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m setuptools_scm ls
setenv =
  {[dists]setenv}
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m twine check \
      --strict \
      {env:PEP517_OUT_DIR}{/}*
commands_post =
