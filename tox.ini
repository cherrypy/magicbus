[tox]
envlist = python
minversion = 4

[python-cli-options]
byte-warnings = -b
byte-errors = -bb
max-isolation = -E -s -I
# some-isolation = -I
# FIXME: Python 2 shim. Is this equivalent to the above?
some-isolation = -E -s
warnings-to-errors = -Werror


[testenv]
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m pytest \
      {tty:--color=yes} \
      {posargs:}
usedevelop = True
extras = testing
passenv =
  WEBTEST_INTERACTIVE
  CI
  GITHUB_WORKFLOW
  PYTEST_*


[dists]
setenv =
  PEP517_OUT_DIR = {env:PEP517_OUT_DIR:{toxinidir}{/}dist}


[testenv:build-docs]
allowlist_externals =
  git
description = Build The Docs
changedir = docs
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags
commands =
  # Build docs site:
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m sphinx \
      -j auto \
      -b html \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      -d "{temp_dir}{/}.doctrees" \
      . \
      "{envdir}{/}docs_out"

  # Print out the output docs dir and a way to serve html:
  -{envpython} \
  {[python-cli-options]byte-errors} \
  {[python-cli-options]some-isolation} \
  -c\
  'import pathlib;\
  docs_dir = pathlib.Path(r"{envdir}") / "docs_out";\
  index_file = docs_dir / "index.html";\
  print(f"\nDocumentation available under \
  `file://\{index_file\}`\n\nTo serve docs, use \
  `python3 -m http.server --directory \
  \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0`\n")'
envdir = {toxworkdir}/build-docs
extras =
  docs
  testing

[testenv:pre-commit]
deps = pre-commit
commands = pre-commit run --all-files --show-diff-on-failure {posargs}

[testenv:pre-commit-pep257]
deps = pre-commit
commands =
  sed -i.bak 's/^\s\+exclude: magicbus\/test$//g' .pre-commit-config.yaml
  pre-commit run --all-files --show-diff-on-failure pep257 {posargs}


[testenv:cleanup-dists]
description =
  Wipe the the dist{/} folder
usedevelop = false
skip_install = true
deps =
setenv =
  {[dists]setenv}
commands =
  {envpython} \
  {[python-cli-options]byte-errors} \
  {[python-cli-options]some-isolation} \
  -c \
    'import os, shutil, sys; dists_dir = os.getenv("PEP517_OUT_DIR"); shutil.rmtree(dists_dir, ignore_errors=True); sys.exit(os.path.exists(dists_dir))'


[testenv:build-dists]
description =
  Build dists and put them into
  the `{env:PEP517_OUT_DIR}{/}` folder
depends =
  cleanup-dists
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
  build ~= 0.10.0
passenv =
  PEP517_BUILD_ARGS
setenv =
  {[dists]setenv}
commands =
  # Starting with build v0.5.0, it builds wheel from sdist
  # if no format arguments are passed. This makes sure that
  # wheels are not dependent on the Git repo or anything
  # external what may be missing from sdist.
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m build \
      --outdir '{env:PEP517_OUT_DIR}{/}' \
      {posargs:{env:PEP517_BUILD_ARGS:}} \
      '{toxinidir}'


[testenv:metadata-validation]
description =
  Verify that dists under the `{env:PEP517_OUT_DIR}{/}` dir
  have valid metadata
depends =
  build-dists
deps =
  setuptools-scm
  twine
usedevelop = false
skip_install = true
commands_pre =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m setuptools_scm ls
setenv =
  {[dists]setenv}
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    -m twine check \
      --strict \
      {env:PEP517_OUT_DIR}{/}*
commands_post =
